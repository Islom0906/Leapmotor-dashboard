{"version":3,"file":"static/js/154.18aad1a1.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/services/apis/axios.js","@crema/utility/helper/persistence-storage.js","@crema/services/apis/api.js","pages/sample/TgBotId/TgBotIdPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import {getItem} from '../../utility/helper/persistence-storage';\nimport axios from 'axios';\n\naxios.defaults.baseURL = `${process.env.REACT_APP_API_URL}`;\n\naxios.interceptors.request.use((config) => {\n    const jwt = getItem('lptoken');\n    const authorization = jwt!==null ? `Bearer ${jwt}` : '';\n    config.headers.authorization = authorization;\n    return config;\n});\n\nexport default axios;","export const getItem=(key)=>{\n    try {\n        return localStorage.getItem(key)\n    } catch (error) {\n        console.log('Error getting data')\n    }\n}\n\nexport const setItem=(key,data)=>{\n    try {\n        localStorage.setItem(key,data)\n    } catch (error) {\n        console.log('Error saving data')\n    }\n}\nexport const removeItem=(key)=>{\n    try {\n        return localStorage.removeItem(key)\n    } catch (error) {\n        console.log('Error removing data')\n    }\n}","import axios from './axios';\n\nconst apiService = {\n    // malutmotlarni get qilish uchun url beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async getData(url) {\n        const {data} = await axios.get(url);\n        return data;\n    },\n    // faqat bitta malumot  get qilish uchun url va idsi beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async getDataByID(url, id) {\n        const {data} = await axios.get(`${url}/${id}`);\n        return data;\n    },\n    // malutmotni post qilish uchun url va yaratilgan malumot beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async postData(url, formData) {\n        const {data}= await axios.post(url, formData);\n        return data\n    },\n    // malutmotni edit qilish uchun url,id va yaratilgan malumot beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async editData(url, formData, id) {\n        const {data}= await axios.put(`${url}/${id}`, formData)\n        return data\n    },\n    // malutmotni delete qilish uchun url va id  beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async deleteData(url, id) {\n        await axios.delete(`${url}/${id}`);\n    },\n\n    async deleteImages(url, ids) {\n        await axios.delete(url, {data:ids});\n    },\n};\nexport default apiService;","import React, {useEffect, useMemo, useState} from 'react';\nimport {Button, Col, Form, message, Row, Select} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\nconst initialValueForm = {\n    name: \"\",\n    tgId: \"\",\n    role: \"\",\n    region:\"\",\n    dealer:\"\"\n};\n\n\n\n\nconst TgBotIdPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n    const [dealers, setDealers] = useState([])\n    const [isDrive, setIsDrive] = useState(false)\n    // query-region\n    const {data: regionData} = useQuery('get-region', () => apiService.getData('/region'));\n\n\n    // query-tgbot\n    const {\n        mutate: postTgBotMutate,\n        data: postTgBot,\n        isLoading: postTgBotLoading,\n        isSuccess: postTgBotSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editTgBotLoading,\n        data: editTgBotData,\n        refetch: editTgBotRefetch,\n        isSuccess: editTgBotSuccess,\n    } = useQuery([\"edit-tgbot\", editId], () => apiService.getDataByID(\"/tgbot\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putTgBot,\n        isLoading: putTgBotLoading,\n        data: putData,\n        isSuccess: putTgBotSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // tgbot success\n    useEffect(() => {\n        if (putTgBotSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postTgBotSuccess || putTgBotSuccess) {\n\n            navigate('/tgbot')\n        }\n    }, [postTgBot, putData])\n\n\n    // if edit tgbot\n    useEffect(() => {\n        if (editId !== \"\") {\n            editTgBotRefetch();\n        }\n    }, [editId]);\n\n    // if no edit tgbot\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit tgbot\n    useEffect(() => {\n\n        if (editTgBotSuccess) {\n\n            const edit = {\n                name: editTgBotData.name,\n                tgId: editTgBotData.tgId,\n                role: editTgBotData.role,\n                region: editTgBotData.region,\n                dealer: editTgBotData.dealer,\n\n            }\n            if (editTgBotData.role==='drive'){\n                setIsDrive(true)\n            }else{\n                setIsDrive(false)\n            }\n            form.setFieldsValue(edit)\n        }\n\n    }, [editTgBotData])\n\n\n    const onFinish = (values) => {\n\n        const data={\n            name: values.name,\n            tgId: values.tgId,\n            role: values.role,\n            region:isDrive ? values.region : \"\",\n            dealer:isDrive ? values.dealer : \"\"\n        }\n\n        if (editTgBotData) {\n            putTgBot({url: '/tgbot', data, id: editId})\n        } else {\n            postTgBotMutate({url: \"/tgbot/\", data});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n    // selection\n\n    const changeRole=(value)=>{\n        if (value==='drive'){\n            setIsDrive(true)\n        }else{\n            setIsDrive(false)\n        }\n    }\n\n\n    const optionsRole = useMemo(() => {\n        return [\n            {\n                value: \"all\",\n                label: \"Все роли\",\n            },\n            {\n                value: \"drive\",\n                label: \"Тест-драйв\",\n            },\n            {\n                value: \"dealer\",\n                label: \"Дилер\",\n            },\n            {\n                value: \"order\",\n                label: \"Заказ\",\n            },\n        ]\n    }, []);\n\n    const changeRegion=(value)=>{\n        const findCountry= regionData?.find(dealers=>dealers.nameRu===value)\n        setDealers(findCountry?.dealers)\n        console.log(findCountry)\n    }\n\n    const optionsRegion = useMemo(() => {\n        return regionData?.map((option) => {\n            return {\n                value: option?.nameRu,\n                label: option?.nameRu,\n            };\n        });\n    }, [regionData]);\n\n    const optionsDealers = useMemo(() => {\n        console.log(regionData)\n        return dealers?.map((option) => {\n            return {\n                value: option?.nameRu,\n                label: option?.nameRu,\n            };\n        });\n    }, [dealers]);\n\n\n\n    return (\n        <div>\n            {(postTgBotLoading || editTgBotLoading || putTgBotLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Требуется заполнение'}\n                                label={'Имя пользователя'}\n                                name={'name'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Требуется заполнение'}\n                                label={'Телеграмма ID'}\n                                name={'tgId'}\n                            />\n\n                        </Col>\n                    </Row>\n                    <Row gutter={20}>\n                        <Col span={24}>\n                            <Form.Item\n                                label={'Выберите Роль'}\n                                name={'role'}\n                                rules={[{required: true, message: 'Пожалуйста, выберите роль'},]}>\n                                <Select\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    onChange={changeRole}\n                                    placeholder='Выберите одну модель'\n                                    optionLabelProp='label'\n                                    options={optionsRole}\n                                />\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n                    {\n                        isDrive &&\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label={'Выберите Область'}\n                                name={'region'}\n                                rules={[{required: true, message: 'Пожалуйста, выберите область'},]}>\n                                <Select\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    onChange={changeRegion}\n                                    placeholder='Выберите одну модель'\n                                    optionLabelProp='label'\n                                    options={optionsRegion}\n                                />\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label={'Выберите дилеры'}\n                                name={'dealer'}\n                                rules={[{required: true, message: 'Пожалуйста, выберите дилеры'},]}>\n                                <Select\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    placeholder='Выберите одну дилеры'\n                                    optionLabelProp='label'\n                                    options={optionsDealers}\n                                />\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n                    }\n\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editTgBotSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default TgBotIdPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","_jsx","Form","Item","rules","message","children","Input","axios","baseURL","concat","process","request","use","config","jwt","key","localStorage","getItem","error","console","log","authorization","headers","getData","url","data","get","getDataByID","id","postData","formData","post","editData","put","deleteData","delete","deleteImages","ids","initialValueForm","tgId","role","region","dealer","TgBotIdPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","dispatch","useDispatch","dealers","setDealers","useState","isDrive","setIsDrive","regionData","useQuery","apiService","mutate","postTgBotMutate","postTgBot","isLoading","postTgBotLoading","isSuccess","postTgBotSuccess","useMutation","onSuccess","success","onError","obj","response","editTgBotLoading","editTgBotData","refetch","editTgBotRefetch","editTgBotSuccess","enabled","putTgBot","putTgBotLoading","putData","putTgBotSuccess","_ref2","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","storedValues","JSON","parse","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","optionsRole","useMemo","value","optionsRegion","map","option","nameRu","optionsDealers","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","autoComplete","Row","gutter","Col","FormInput","Select","width","onChange","placeholder","optionLabelProp","options","findCountry","find","Button","htmlType","marginTop"],"sourceRoot":""}