{"version":3,"file":"static/js/281.3e8b28c5.chunk.js","mappings":"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","sources":["@crema/services/apis/axios.js","@crema/utility/helper/persistence-storage.js","@crema/services/apis/api.js","pages/sample/Dashboard/dealersChart.jsx","pages/sample/Dashboard/testDriveChart.jsx","pages/sample/Dashboard/OrderChart.jsx","pages/sample/Dashboard/index.jsx"],"sourcesContent":["import {getItem} from '../../utility/helper/persistence-storage';\nimport axios from 'axios';\n\naxios.defaults.baseURL = `${process.env.REACT_APP_API_URL}`;\n\naxios.interceptors.request.use((config) => {\n    const jwt = getItem('lptoken');\n    const authorization = jwt!==null ? `Bearer ${jwt}` : '';\n    config.headers.authorization = authorization;\n    return config;\n});\n\nexport default axios;","export const getItem=(key)=>{\n    try {\n        return localStorage.getItem(key)\n    } catch (error) {\n        console.log('Error getting data')\n    }\n}\n\nexport const setItem=(key,data)=>{\n    try {\n        localStorage.setItem(key,data)\n    } catch (error) {\n        console.log('Error saving data')\n    }\n}\nexport const removeItem=(key)=>{\n    try {\n        return localStorage.removeItem(key)\n    } catch (error) {\n        console.log('Error removing data')\n    }\n}","import axios from './axios';\n\nconst apiService = {\n    // malutmotlarni get qilish uchun url beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async getData(url) {\n        const {data} = await axios.get(url);\n        return data;\n    },\n    // faqat bitta malumot  get qilish uchun url va idsi beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async getDataByID(url, id) {\n        const {data} = await axios.get(`${url}/${id}`);\n        return data;\n    },\n    // malutmotni post qilish uchun url va yaratilgan malumot beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async postData(url, formData) {\n        const {data}= await axios.post(url, formData);\n        return data\n    },\n    // malutmotni edit qilish uchun url,id va yaratilgan malumot beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async editData(url, formData, id) {\n        const {data}= await axios.put(`${url}/${id}`, formData)\n        return data\n    },\n    // malutmotni delete qilish uchun url va id  beriladi\n    // url / boshlansin yani /edu shunga oxshagan\n    async deleteData(url, id) {\n        await axios.delete(`${url}/${id}`);\n    },\n\n    async deleteImages(url, ids) {\n        console.log('delete image',ids)\n        await axios.delete(url, {data:ids});\n    },\n};\nexport default apiService;","import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend ,ResponsiveContainer} from 'recharts';\nimport { useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {message,Typography } from 'antd';\nimport { useMemo } from 'react';\nconst { Title } = Typography;\n\n\n\nconst DealersChart = () => {\n  const {data,isError,isLoading} = useQuery(\n    'dealers-get',\n    () => apiService.getData('/dealers'),\n    {\n      onError: (error) => {\n          console.log(error)\n        message.error(error);\n      },\n    },\n  );\n    const dataOrder = useMemo(() => {\n        if (isLoading || isError) {\n            return []; // Return an empty array or handle error state\n        }\n\n        const dataMap = new Map();\n\n        data?.forEach((entry) => {\n            const createdAtDate = new Date(entry?.createdAt).toLocaleDateString();\n\n            if (dataMap?.has(createdAtDate)) {\n                dataMap?.set(createdAtDate, dataMap.get(createdAtDate) + 1);\n            } else {\n                dataMap?.set(createdAtDate, 1);\n            }\n        });\n\n        const result = [];\n\n        for (const [date, count] of dataMap) {\n            result.push({ date, count });\n        }\n\n        return result;\n    }, [data, isLoading, isError]);\n\n  return (\n    <div>\n      <Title type='h2'>Статистика заявок дилера</Title>\n      <ResponsiveContainer width=\"100%\" height={300}>\n       <BarChart  data={dataOrder}>\n                <CartesianGrid strokeDasharray=\"3 6\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"count\" fill=\"#8884d8\" />\n            </BarChart>\n            </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default DealersChart","import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend ,ResponsiveContainer} from 'recharts';\nimport { useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {message,Typography } from 'antd';\nimport { useMemo } from 'react';\nconst { Title } = Typography;\n\n\n\nconst OrderChart = () => {\n    const {data,isError,isLoading} = useQuery(\n        'testDrive-get',\n        () => apiService.getData('/testDrive'),\n        {\n            onError: (error) => {\n                console.log(error)\n                message.error(error);\n            },\n        },\n    );\n    const dataOrder = useMemo(() => {\n        if (isLoading || isError) {\n            return []; // Return an empty array or handle error state\n        }\n\n        const dataMap = new Map();\n\n        data?.forEach((entry) => {\n            const createdAtDate = new Date(entry?.createdAt).toLocaleDateString();\n\n            if (dataMap?.has(createdAtDate)) {\n                dataMap?.set(createdAtDate, dataMap.get(createdAtDate) + 1);\n            } else {\n                dataMap?.set(createdAtDate, 1);\n            }\n        });\n\n        const result = [];\n\n        for (const [date, count] of dataMap) {\n            result.push({ date, count });\n        }\n\n        return result;\n    }, [data, isLoading, isError]);\n\n    return (\n        <div>\n            <Title type='h2'>Статистика заявок тест-драйва</Title>\n            <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart  data={dataOrder}>\n                    <CartesianGrid strokeDasharray=\"3 6\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"count\" fill=\"#82ca9d\" />\n                </BarChart>\n            </ResponsiveContainer>\n        </div>\n    )\n}\n\nexport default OrderChart","import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend ,ResponsiveContainer} from 'recharts';\nimport { useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {message,Typography } from 'antd';\nimport { useMemo } from 'react';\nconst { Title } = Typography;\n\n\n\nconst DealersChart = () => {\n  const {data,isError,isLoading} = useQuery(\n      'order-get',\n      () => apiService.getData('/order'),\n      {\n        onError: (error) => {\n          console.log(error)\n          message.error(error);\n        },\n      },\n  );\n  const dataOrder = useMemo(() => {\n    if (isLoading || isError) {\n      return []; // Return an empty array or handle error state\n    }\n\n    const dataMap = new Map();\n\n    data?.forEach((entry) => {\n      const createdAtDate = new Date(entry?.createdAt).toLocaleDateString();\n\n      if (dataMap?.has(createdAtDate)) {\n        dataMap?.set(createdAtDate, dataMap.get(createdAtDate) + 1);\n      } else {\n        dataMap?.set(createdAtDate, 1);\n      }\n    });\n\n    const result = [];\n\n    for (const [date, count] of dataMap) {\n      result.push({ date, count });\n    }\n\n    return result;\n  }, [data, isLoading, isError]);\n\n  return (\n      <div>\n        <Title type='h2'>Статистика заказов автомобилей</Title>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart  data={dataOrder}>\n            <CartesianGrid strokeDasharray=\"3 6\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"count\" fill=\"#8884d8\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n  )\n}\n\nexport default DealersChart","import React from 'react';\nimport DealersChart from './dealersChart';\nimport TestDriveChart from './testDriveChart';\nimport OrderChart from './OrderChart';\n\n\n\n\n\nconst Dashboard = () => {\n    return (\n        <div>\n           <DealersChart/>\n           <TestDriveChart/>\n            <OrderChart/>\n        </div>\n    );\n};\n\nexport default Dashboard;"],"names":["axios","baseURL","concat","process","request","use","config","jwt","key","localStorage","getItem","error","console","log","authorization","headers","getData","url","data","get","getDataByID","id","postData","formData","post","editData","put","deleteData","delete","deleteImages","ids","Title","Typography","DealersChart","isError","isLoading","useQuery","apiService","onError","message","dataOrder","useMemo","dataMap","Map","forEach","entry","createdAtDate","Date","createdAt","toLocaleDateString","has","set","result","date","count","push","_jsxs","children","_jsx","type","ResponsiveContainer","width","height","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","OrderChart","Dashboard","TestDriveChart"],"sourceRoot":""}